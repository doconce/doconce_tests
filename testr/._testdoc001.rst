

.. |nbsp| unicode:: 0xA0
   :trim:

.. !split

.. _sec1:

Section 1
=========

Here is a nested list:

  * item1

  * item2

  * item3 which continues on the next line to test that feature

  * and a sublist

    * with indented subitem1

    * and a subitem2

  * and perhaps an ordered sublist

   a. first item

   b. second item, continuing on a new line

**Here is a list with paragraph heading.**

  * item1

  * item2

Here is a list with subsubsection heading
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  * item1

  * item2


..

    Here are two lines that make up
    a block quote for testing *emphasized words* and **boldface words**,
    also with hypens:
    *pre*-fix, post-*fix*, **pre**-fix, post-**fix**.



Here are two references. Equation |nbsp| :ref:`(6) <Eq:my:eq1>` is fine. Eq. |nbsp| :ref:`(6) <Eq:my:eq1>` too.
Even Equation :ref:`(6) <Eq:my:eq1>` without the tilde.
This equation appears in another part if this document is split.

.. _subsec1:

Subsection 1
------------

.. index:: somefunc function

.. Refer to section/appendix etc. at the beginning of the line

.. and other special fix situations for HTML.

More text, with a reference back to
the section :ref:`sec1` and :ref:`subsec1`, and further to the
the sections :ref:`subsec1` and :ref:`subsubsec:ex`, which
encourages you to do the tasks in :ref:`demo:ex:1` and :ref:`exer:some:formula`.
 :ref:`app1` and :ref:`app2` are also nice elements.

Test Section reference at beginning of line and after a sentence
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The section :ref:`subsec1` is fine.
The section :ref:`subsubsec:ex` too.

.. sphinx code-blocks: pycod=python cod=fortran cppcod=c++ sys=console

Computer code
~~~~~~~~~~~~~

Let's do some copying from files too. First from subroutine up to the very end,

.. code-block:: fortran

          subroutine test()
          integer i
          real*8 r
          r = 0
          do i = 1, i
             r = r + i
          end do
          return
    C     END1
    
          program testme
          call test()
          return

and then just the subroutine,

.. code-block:: fortran

          subroutine test()
          integer i
          real*8 r
          r = 0
          do i = 1, i
             r = r + i
          end do
          return

and finally the complete file with a plain text verbatim environment
(``envir=ccq``):

.. code-block:: text

    C     a comment
    
          subroutine test()
          integer i
          real*8 r
          r = 0
          do i = 1, i
             r = r + i
          end do
          return
    C     END1
    
          program testme
          call test()
          return

Testing other code environments. First Python:

.. code-block:: doconce

    !bc pycod
    def f(x):
        return x+1
    !ec

which gets rendered as

.. code-block:: python

    def f(x):
        return x+1

Test paragraph and subsubsection headings before
before code.

**Paragraph heading before code.**

.. code-block:: python

    import sys
    sys.path.insert(0, os.pardir)

Subsubsection heading before code
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    def h(z):
        return z+1

Now a complete program to be shown via Python Online Tutorial:

.. raw:: html

    <iframe width="950" height="500" frameborder="0"
            src="https://pythontutor.com/iframe-embed.html#code=class+Line%3A%0A++++def+__init__%28self%2C+a%2C+b%29%3A%0A++++++++self.a%2C+self.b+%3D+a%2C+b%0A%0A++++def+__call__%28self%2C+x%29%3A%0A++++++++a%2C+b+%3D+self.a%2C+self.b%0A++++++++return+a%2Ax+%2B+b%0A%0Aline+%3D+Line%282%2C+1%29%0Ay+%3D+line%28x%3D3%29%0Aprint%28y%29&py=2&curInstr=0&cumulative=false">
    </iframe>

Another complete program to be typeset as a sage cell:

.. code-block:: text

    a = 2
    b = 3
    print('a+b:', a + b)
    
    # In a sage cell we can also plot
    from matplotlib.pyplot import *
    from numpy import *
    x = linspace(0, 4*pi, 101)
    y = exp(-0.1*x)*cos(x)
    plot(x, y)
    xlabel('x'); ylabel('y')
    show()

Then Cython (with -h option so it is hidden in html/sphinx):

.. container:: toggle

    .. container:: header

        **Show/Hide Code**

    .. code-block:: cython

        cpdef f(double x):
            return x + 1

Standard Python shell sessions:

.. code-block:: python

    >>> from numpy import linspace, sin
    >>> # Some comment
    >>> x = linspace(0, 2, 11)
    >>> y = sin(x)
    >>> y[0]

    >>> import matplotlib.pyplot as plt
    >>> plt.plot(x, y)

Similar IPython sessions:

.. code-block:: ipy

    In [1]: from numpy import linspace, sin
    In [2]: # Some comment
    In [3]: x = linspace(0, 2, 11)
    In [4]: y = sin(x)
    In [5]: y[0]
    Out[5]: 0
    In [6]: import matplotlib.pyplot as plt
    In [7]: plt.plot(x, y)
    In [8]: a='multiple-\nline\noutput'
    In [9]: a
    Out[9]: 'multiple-\nline\noutput'
    In [10]: print(a)
    multiple-
    line
    output

Here is the interactive session again, but with ``pyshell-t``.

.. code-block:: python

    >>> from numpy import linspace, sin
    >>> # Some comment
    >>> x = linspace(0, 2, 11)
    >>> y = sin(x)
    >>> y[0]

    >>> import matplotlib.pyplot as plt
    >>> plt.plot(x, y)

.. This one tests a + sign before a code environment

C++:

.. code-block:: c++

    #include <iostream>
    
    int main()
    {
       std::cout << "Sample output" << std::endl;
       return 0
    }

.. The next should get correctly typset in sphinx (cod is fcod)

.. It also tests emoji before code

And a little bit of Fortran: :dizzy_face:

.. code-block:: doconce

    !bc cod
          subroutine midpt(x, length, a, b)
          real*8 a, b, x
          x = (a + b)/2
          length = b - a
          return
          end
    !ec

which then is typeset as

.. code-block:: fortran

          subroutine midpt(x, length, a, b)
          real*8 a, b, x
          x = (a + b)/2
          length = b - a
          return
          end

HTML:

.. code-block:: html

    <table>
    <tr><td>Column 1</td><td>Column 2</td></tr>
    <tr><td>0.67526 </td><td>0.92871 </td></tr>
    <!-- comment -->
    </table>

But inline HTML code is also important, like text that starts with
``<a href="`` (which can destroy the following text if not properly
quoted).

Matlab with comments requires special typesetting:

.. code-block:: matlab

    % Comment on the beginning of the line can be escaped by %%
    if a > b
      % Indented comment needs this trick
      c = a + b
    end

And here is a system call:

.. code-block:: console

    Terminal> mkdir test
    Terminal> cd test
    Terminal> myprog -f
    output1
    output2

Any valid pygments lexer/language name can appear to, e.g.,

.. code-block:: doconce

    !bc restructuredtext
    =======
    Heading
    =======
    
    Some text.
    !ec

results in

.. code-block:: restructuredtext

    =======
    Heading
    =======
    
    Some text.

.. Here goes hidden code.

.. Python can be treated by some formats, Fortran is always out.

Finally, ``!bc do`` supports highlighting of DocOnce source:

.. code-block:: doconce

    ======= DocOnce test file =======
    
    ===== Computer code =====
    
    Inline verbatim code, as in `import numpy as np`, is allowed, as well as
    code blocks:
    
    !bc pycod
    from math import sin
    
    def f(x):
        """Example on a function."""
        return sin(x) + 1
    
    print(f(0))
    !ec
    
    
    ===== Mathematics =====
    
    Formulas can be inline, as in $\nabla\cdot\boldsymbol{u} = 0$, or typeset
    as equations:
    
    !bt
    \begin{align*}
    \nabla\cdot\boldsymbol{u} &= 0,\\ 
    \boldsymbol{u} &= \nabla\phi .
    \end{align*}
    !et
    
    === Subsubsection heading ===
    
    DocOnce files can have chapters, sections, subsections, and subsubsections.
    
    __Paragraph heading.__ Paragraphs may have headings.

It is time to test ``verbatim inline font`` especially with ``a newline
inside the text`` and an exclamation mark at the end: ``BEGIN``! For
spellcheck, test ``a verbatim expression`` in ``another`` in a ``third``.
Also test exclamation mark as in ``!bc`` and ``!ec`` as well as ``a != b``.
Also test backslashes and braces like ``\begin``, ``\begin{enumerate}``,
``\end{this}\end{that}``, and ``{something \inside braces}``.

The following attempt to exemplify colored text does not work in
format sphinx.
Here is some **red color** and an attempt to write **with
green color containing a linebreak

| code.** Some formats will only display 
| this correctly when ``html`` 
| is the output format.

But here some more running text is added which is not part of
the previous blocks with line breaks.

Running OS commands
~~~~~~~~~~~~~~~~~~~

.. code-block:: console

    Terminal> python -c 'print("Testing\noutput\nfrom\nPython.")'
    Testing
    output
    from
    Python.

Footnotes
~~~~~~~~~

Here is a test of footnotes [#footnote]_, which are handy in text.
They are used in different flavors, now in

 * list items (note below that footnotes work after math, verbatim, and URLs - bin fact old and emphasize too!)

 * even with math :math:`\nabla^2u` [#math1]_

 * and code ``h[i] += 1`` [#code]_ (*must* have space between inline code and footnote!)

 * and `links <https://google.com>`__ [#google-search]_

which gives flexibility in writing.
This is the third [#example-of-the-third-footnote]_ example.

.. [#footnote] Typesetting of the footnote depends on the format.
   Plain text does nothing, LaTeX removes the
   definition and inserts the footnote as part of the LaTeX text.
   reStructuredText and Sphinx employ a similar type of typesetting
   as Extended Markdown and DocOnce, and in HTML we keep the same
   syntax, just displayed properly in HTML.

.. [#math1] Math footnotes can be dangerous since it
   interferes with an exponent.

.. [#code] One-line footnote.

.. [#google-search] `<google.com>`_ is perhaps the most famous
   web site today.

Here is some more text before a new definition of a footnote that was
used above.


.. admonition:: Non-breaking space character

   This paragraph aims to test `non-breaking space character <https://en.wikipedia.org/wiki/Non-breaking_space>`__, and a typical
   example where this is needed is in physical units: 7.4 |nbsp| km is traveled
   in |nbsp| :math:`7.4/5.5\approx 1.345` |nbsp| s.  Also check that a |nbsp| `link <https://google.com>`__ |nbsp| is
   not broken across lines (drag the browser window to test this).
   (On the other hand, the tilde is used in
   computer code, e.g., as in ``[~x for x in y]`` or in ``y=~x``, and should
   of course remain a tilde in those contexts.)




.. _subsec:ex:

Subsection 2: Testing figures
-----------------------------

.. index:: figures

Test of figures. In particular we refer to Figure :ref:`fig:impact` in which
there is a flow.

.. _fig:impact:

.. figure:: testfigs/wave1D.png
   :width: 200

   Visualization **of** a *wave*

Figures without captions are allowed and will be inlined.

.. figure:: testfigs/wave1D.png
   :width: 200

.. index:: movies

.. Test multi-line caption in figure with sidecap=True

Here is figure :ref:`myfig` with a long (illegal) multi-line caption
containing inline verbatim text:

.. _myfig:

.. figure:: testfigs/wave1D.png
   :width: 500

   A long caption spanning several lines and containing verbatim words like ``my_file_v1`` and ``my_file_v2`` as well as math with subscript as in :math:`t_{i+1}`

.. Must be a blank line after MOVIE or FIGURE to detect this problem

Test URL as figure name:

.. figure:: https://raw.github.com/doconce/doconce/master/doc/src/blog/f_plot.png
   :width: 500

Test SVG figure:

.. figure:: https://openclipart.org/people/jpneok/junebug.svg
   :width: 200

.. Test wikimedia type of files that otherwise reside in subdirs

**Remark.**
Movies are tested in separate file ``movies.do.txt``.

.. Somewhat challenging heading with latex math, \t, \n, ? and parenthesis

.. _decay:sec:theta:

The :math:`\theta` parameter (not :math:`\nabla`?)
--------------------------------------------------

Functions do not always need to be advanced, here is one
involving :math:`\theta`:

.. code-block:: text

    def f(theta):
        return theta**2

**More on :math:`\theta`.**
Here is more text following headline with math.

Newcommands must also be tested in this test report:
:math:`\frac{1}{2}`, :math:`{1/2}`, :math:`\pmb{x}`, :math:`\frac{Du}{dt}`,
both inline and in block:

.. math::
        
        \frac{Du}{dt} = 0\nonumber
        

.. _Eq:_auto1:

.. math::

    \tag{1}
    \frac{1}{2} = {1/2}
        
        

.. _Eq:_auto2:

.. math::

    \tag{2}
    \frac{1}{2}\pmb{x} = \pmb{n}
        
        

Or with align with label and numbers:

.. _Eq:aligneq1:

.. math::

    \tag{3}
    \frac{Du}{dt} = 0
        
        

.. _Eq:_auto3:

.. math::

    \tag{4}
    \frac{1}{2} = {1/2}
        
        

.. _Eq:aligneq2:

.. math::

    \tag{5}
    \frac{1}{2}\pmb{x} = \pmb{n}
        
        

Sphinx makes a fix here and splits align into multiple equation
environments.

Custom Environments
-------------------

Here is an attempt to create a theorem environment via Mako
(for counting theorems) and comment lines to help replacing lines in
the ``.tex`` by proper begin-end LaTeX environments for theorems.
Should look nice in most formats!

.. begin theorem

**Theorem 5.**
Let :math:`a=1` and :math:`b=2`. Then :math:`c=3`.

.. end theorem

.. begin proof

**Proof.**
Since :math:`c=a+b`, the result follows from straightforward addition.
:math:`\Diamond`

.. end proof

As we see, the proof of Theorem 5 is a modest
achievement.

.. _subsec:table:

Tables
------

.. index:: test index with verbatim text which is possible

.. index:: test two (separate) verbatim expressions which is also possible

.. index::
   single: index with; subindex

.. index:: boldface word in index

.. index:: index with boldface word

.. index::
   single: index with; boldface word in subentry

.. index::
   single: double boldface word;  boldface word in subentry too

.. index with comma could fool sphinx

.. index::
   single: index, with comma, and one more

Let us take this table from the manual:

====  ========  ============  
time  velocity  acceleration  
====  ========  ============  
0.0     1.4186         -5.01  
2.0   1.376512        11.919  
4.0     1.1E+1     14.717624  
====  ========  ============  

The DocOnce source code reads

.. code-block:: text

      |--------------------------------|
      |time  | velocity | acceleration |
      |--l--------r-----------r--------|
      | 0.0  | 1.4186   | -5.01        |
      | 2.0  | 1.376512 | 11.919       |
      | 4.0  | 1.1E+1   | 14.717624    |
      |--------------------------------|
    

Here is yet another table to test that we can handle more than
one table:

====  ========  ============  
time  velocity  acceleration  
====  ========  ============  
0.0   1.4186    -5.01         
1.0   1.376512  11.919        
3.0   1.1E+1    14.717624     
====  ========  ============  

And one with math headings (that are expanded and must be treated
accordingly), verbatim heading and entry, and no space around the pipe
symbol:

=========  ===========  ================  =======  
:math:`i`  :math:`h_i`  :math:`\bar T_i`  ``L_i``  
=========  ===========  ================  =======  
0                    0               288  -0.0065  
1               11,000               216      0.0  
2               20,000               216    0.001  
3               32,000               228   0.0028  
4               47,000               270      0.0  
5               51,000               270  -0.0028  
6               71,000               214  ``NaN``  
=========  ===========  ================  =======  

And add one with verbatim headings (with underscores),
and rows starting with ``|-`` because of a negative number,
and ``|`` right before and after verbatim word (with no space):

=====  =======  =====================  ===========  
exact  ``v_1``  :math:`a_i` + ``v_2``  ``verb_3_``  
=====  =======  =====================  ===========  
    9     9.62                   5.57         8.98  
  -20   -23.39                  -7.65       -19.93  
   10    17.74                  -4.50         9.96  
    0    -9.19                   4.13        -0.26  
=====  =======  =====================  ===========  

Pipe symbols in verbatim and math text in tables used to pose difficulties,
but not
anymore:

===============  ===============  
   :math:`S`         command      
===============  ===============  
$ ||a_0|| $      ``norm|length``  
:math:`x\cap y`          ``x|y``  
===============  ===============  

Here is a table with X alignment:

=====  ==========================================================================================================================================================================================================================  
 Type                                                                                                         Description                                                                                                          
=====  ==========================================================================================================================================================================================================================  
  X    Alignment character that is used for specifying a potentially very long text in a column in a table. It makes use of the ``tabularx`` package in LaTeX, otherwise (for other formats) it means ``l`` (centered alignment).  
l,r,c  standard alignment characters                                                                                                                                                                                               
=====  ==========================================================================================================================================================================================================================  

Finally, a table with math
(``bm`` that expands to ``boldsymbol``, was tricky, but
cleanly handled now)
and URLs.

.. Mako code to expand URLs in the table

.. (These types of tables did not work before Jan 2014)

====================================  ==========================================================  ==========================================================  
                                                                                                                                                              
====================================  ==========================================================  ==========================================================  
       :math:`\mathcal{L}=0`          `080 <../doc/src/manual/mov/wave_frames/frame_0080.png>`__  `085 <../doc/src/manual/mov/wave_frames/frame_0085.png>`__  
            :math:`a=b`               `090 <../doc/src/manual/mov/wave_frames/frame_0090.png>`__  `095 <../doc/src/manual/mov/wave_frames/frame_0095.png>`__  
:math:`\nabla\cdot\boldsymbol{u} =0`  `100 <../doc/src/manual/mov/wave_frames/frame_0100.png>`__  `105 <../doc/src/manual/mov/wave_frames/frame_0105.png>`__  
====================================  ==========================================================  ==========================================================  

A test of verbatim words in heading with subscript :math:`a_i`: ``my_file_v1`` and ``my_file_v2``
-------------------------------------------------------------------------------------------------

**Paragraph with verbatim and math: ``my_file_v1.py`` and ``my_file_v2.py`` define some math :math:`a_{i-1}`.**
Here is more ``__verbatim__`` code and
some plain text on a new line.

.. Test various types of headlines

**Just bold**
-------------

Some text.

*Just emphasize*
----------------

Some text.

``Just verbatim``
-----------------

Some text.

**Bold** beginning
------------------

Some text.

*Emphasize* beginning
---------------------

Some text.

``Verbatim`` beginning
----------------------

Some text.

Maybe **bold end**
------------------

Some text.

Maybe *emphasize end*
---------------------

Some text.

Maybe ``verbatim end``
----------------------

Some text.

The middle has **bold** word
----------------------------

Some text.

The middle has *emphasize* word
-------------------------------

Some text.

The middle has ``verbatim`` word
--------------------------------

Some text.

***Just emphasize*.**
Some text.

**``Just verbatim``.**
Some text.

***Emphasize* beginning.**
Some text.

**``Verbatim beginning``.**
Some text.

**Maybe *emphasize end*.**
Some text.

**Maybe ``verbatim end``.**
Some text.

**The middle has *emphasize* word.**
Some text.

**The middle has ``verbatim`` word.**
Some text.

**Ampersand.**
We can test Hennes & Mauritz, often abbreviated H&M, but written
as ``Hennes & Mauritz`` and ``H & M``.
A sole ``&`` must also work.

.. Note: substitutions must not occur inside verbatim, just in ordinary text.

.. code-block:: text

    # Just to check that ampersand works in code blocks:
    c = a & b

**Quotes.**
Let us also add a test of quotes such as "double quotes, with numbers
like 3.14 and newline/comma and hyphen (as in double-quote)"; written
in the standard LaTeX-style that gives correct LaTeX formatting and
ordinary double quotes for all non-LaTeX formats.  Here is another
sentence that "caused" a bug in the past because double backtick
quotes could imply verbatim text up to a verbatim word starting with
period, like ``.txt``.

More quotes to be tested for spellcheck:
("with parenthesis"), "with newline"
and "with comma", "hyphen"-wise, and "period".

Bibliography test
-----------------

Here is an example: [Ref01]_ discussed propagation of
large destructive water waves, [Ref02]_ gave
an overview of numerical methods for solving the Navier - Stokes equations,
while the use of Backward Kolmogorov equations for analyzing
random vibrations was investigated in [Ref03]_.
The book chapter [Ref04]_ contains information on
C++ software tools for programming multigrid methods. A real retro
reference is [Ref05]_ about a big FORTRAN package.
Multiple references are also possible, e.g., see
[Ref01]_ [Ref04]_.

We need to cite more than 10 papers to reproduce an old formatting
problem with blanks in the keys in reST format:
[Ref06]_ [Ref03]_ [Ref07]_ [Ref01]_
and
[Ref02]_ [Ref08]_ [Ref09]_ [Ref10]_ [Ref11]_ [Ref12]_ [Ref13]_
and all the work of
[Ref14]_ [Ref04]_ [Ref15]_ as well as
old work [Ref05]_ and [Ref16]_, and the
talk [Ref17]_.
Langtangen also had two thesis [Ref18]_ [Ref16]_
back in the days.
More retro citations are
the old ME-IN323 book [Ref19]_ and the
[Ref20]_ OONSKI '94 paper.

.. --- begin exercise ---

.. _Example:

Example 1: Examples can be typeset as exercises
-----------------------------------------------

Examples can start with a subsection heading starting with ``Example:``
and then, with the command-line option ``--examples_as_exercises`` be
typeset as exercises. This is useful if one has solution
environments as part of the example.

.. --- begin subexercise ---

**a)**
State some problem.

**Solution.**
The answer to this subproblem can be written here.

.. --- end subexercise ---

.. --- begin subexercise ---

**b)**
State some other problem.

**Hint 1.**
A hint can be given.

**Hint 2.**
Maybe even another hint?

**Solution.**
The answer to this other subproblem goes here,
maybe over multiple doconce input lines.

.. --- end subexercise ---

.. --- end exercise ---

User-defined environments
-------------------------

The example in the section :ref:`ex:test:1p1` demonstrates how to write a test function.
That is, a special test function for a function ``add`` appears in
the example in the section :ref:`ex:test:1p1`.

.. _ex:test:1p1:

Example 1: A test function
--------------------------

Suppose we want to write a test function for checking the
implementation of a Python function for addition.

.. code-block:: python

    def add(a, b):
        return a + b
    
    def test_add():
        a = 1; b = 1
        expected = a + b
        computed = add(a, b)
        assert expected == computed

.. _ex:math:1p1:

Example 2: Addition
-------------------

We have

.. math::
         1 + 1 = 2 

or in tabular form:

===========  =========  
  Problem      Result   
===========  =========  
:math:`1+1`  :math:`2`  
===========  =========  


.. admonition:: Highlight box

   This environment is used to highlight something:
   
   .. math::
            E = mc^2




.. _subsubsec:ex:

URLs
----

Testing of URLs: hpl's home page `hpl <https://folk.uio.no/hpl>`__, or
the entire URL if desired, `<https://folk.uio.no/hpl>`_.  Here is a
plain file link `<testdoc.do.txt>`_, or `<testdoc.do.txt>`_, or
`<testdoc.do.txt>`_ or `<testdoc.do.txt>`_ or `a link with
newline <testdoc.do.txt>`__. Can test spaces with the link with word
too: `hpl <https://folk.uio.no/hpl>`__ or `hpl <https://folk.uio.no/hpl>`__. Also ``file:///`` works: `link to a
file <file:///home/hpl/vc/doconce/doc/demos/manual/manual.html>`__ is
fine to have. Moreover, "loose" URLs work, i.e., no quotes, just
the plain URL as in `<https://folk.uio.no/hpl>`_, if followed by space, comma,
colon, semi-colon, question mark, exclamation mark, but not a period
(which gets confused with the periods inside the URL).

Mail addresses can also be used: `hpl@simula.no <mailto:hpl@simula.no>`__, or just a `mail link <mailto:hpl@simula.no>`__, or a raw `<mailto:hpl@simula.no>`_.

Here are some tough tests of URLs, especially for the ``latex`` format:
`Newton-Cotes <https://en.wikipedia.org/wiki/Newton%E2%80%93Cotes_formulas>`__ formulas
and a `good book <https://www.springer.com/mathematics/computational+science+%26+engineering/book/978-3-642-23098-1>`__. Need to test
Newton-Cotes with percentage in URL too:
`<https://en.wikipedia.org/wiki/Newton%E2%80%93Cotes_formulas>`_
and `<https://en.wikipedia.org/wiki/Newton-Cotes#Open_Newton.E2.80.93Cotes_formulae>`_ which has a shebang.

For the ``--device=paper`` option it is important to test that URLs with
monospace font link text get a footnote
(unless the ``--latex_no_program_footnotelink``
is used), as in this reference to
`decay_mod <https://github.com/hplgit/INF5620/tree/gh-pages/src/decay/experiments/decay_mod.py>`__, `ball1.py <https://tinyurl.com/pwyasaa/formulas.ball1.py>`__,
and `ball2.py <https://tinyurl.com/pwyasaa/formulas.ball2.py>`__.

.. Comments should be inserted outside paragraphs (because in the rst

.. format extra blanks make a paragraph break).

.. Note that when there is no https: or file:, it can be a file link

.. if the link name is URL, url, "URL", or "url". Such files should,

.. if rst output is desired, but placed in a ``_static*`` folder.

More tough tests: repeated URLs whose footnotes when using the
``--device=paper`` option must be correct. We have
`google <https://google.com>`__, `google <https://google.com>`__, and
`google <https://google.com>`__, which should result in exactly three
footnotes.

